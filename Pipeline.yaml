#Creator : Alexander Abbott
#Source  : https://github.com/a-abbott/TF-AZ-DNS

#Variables
variables:

  # Devops

    - name : var_vm_image
      # What version of terraform should be used
      value: "ubuntu-latest"

    - name : var_az_sp
      # Which service principal in Devops can be used to deploy to the desired Azure subscription.
      value: ""
      

  # Terraform

    - name : var_tf_version
      # What version of terraform should be used
      value: "latest"

    - name : var_tf_state_rg
      # Name of the resource group to create/use for the terraform state file
      value: "" 
  
    - name : var_tf_state_location
      # Location of the resource group to create/use for the terraform state file
      value: "uksouth" 

    - name : var_tf_state_sku
      # SKU to use when creating the storeage account to create/use for the terraform state file
      value: "Standard_RAGRS"

    - name: var_tf_state_sa_name
      # Name of of the storage account to create/use for the terraform state file
      value: ""

    - name: var_tf_state_container_name
      # Name of of the container to create/use for the terraform state file
      value: "tfstate" 

    - name: var_tf_environment
      # Enviroment name, used for the statefile name
      value: ""

# Terraform pipeline
trigger:
  branches:
    include:
    - master
  paths:
    include:
    - main.tf

pool:
  vmImage: $(var_vm_image)

stages:
  
  # Validate Terraform - using the following
  # https://marketplace.visualstudio.com/items?itemName=charleszipp.azure-pipelines-tasks-terraform
  #################################################################################################

  - stage: "validateTerraform"
    displayName: "Terraform - Validate"
    dependsOn:
      - "runCheckov"
    jobs:
      - job: "TerraformJobs"
        displayName: "Terraform > install, init and validate"
        continueOnError: false
        steps:
          - task: TerraformInstaller@0
            inputs:
              terraformVersion: "$(var_tf_version)"
            displayName: "Install > terraform"

          - task: TerraformCLI@0
            inputs:
              command: "init"
              backendType: "azurerm"
              backendServiceArm: "$(var_az_sp)"
              ensureBackend: true
              backendAzureRmResourceGroupName: "$(var_tf_environment)-$(var_tf_state_rg)"
              backendAzureRmResourceGroupLocation: "$(var_tf_state_location)"
              backendAzureRmStorageAccountName: "$(var_tf_state_sa_name)"
              backendAzureRmStorageAccountSku: "$(var_tf_state_sku)"
              backendAzureRmContainerName: $(var_tf_state_container_name)
              backendAzureRmKey: "$(var_tf_environment).terraform.tstate"
            displayName: "Run > terraform init"

          - task: TerraformCLI@0
            inputs:
              command: "validate"
              environmentServiceName: "$(var_az_sp)"
            displayName: "Run > terraform validate"

  # Import existing infrastructure to Terraform - Based on the following ...
  # https://www.terraform.io/docs/cli/import/index.html
  ######################################################################

  - stage: "importTerraform"
    displayName: "Terraform - Import"
    dependsOn:
        - "validateTerraform"
    jobs:
      - job: "TerraformJobs"
        displayName: "Terraform > install, init & import"
        continueOnError: false
        steps:
          - task: TerraformInstaller@0
            inputs:
              terraformVersion: "$(var_tf_version)"
            displayName: "Install > terraform"

          - task: TerraformCLI@0
            inputs:
              command: "init"
              backendType: "azurerm"
              backendServiceArm: "$(var_az_sp)"
              ensureBackend: true
              backendAzureRmResourceGroupName: "$(var_tf_environment)-$(var_tf_state_rg)"
              backendAzureRmResourceGroupLocation: "$(var_tf_state_location)"
              backendAzureRmStorageAccountName: "$(var_tf_state_sa_name)"
              backendAzureRmStorageAccountSku: "$(var_tf_state_sku)"
              backendAzureRmContainerName: $(var_tf_state_container_name)
              backendAzureRmKey: "$(var_tf_environment).terraform.tstate"
            displayName: "Run > terraform init"
        # Remove comments, and complete import command to adopt exisiting resources into TF
        # - task: TerraformCLI@0
        #   inputs:
        #     command: "import"
        #     environmentServiceName: "$(var_az_sp)"
        #   isplayName: "Run > terraform import"

  # Plan Terraform - uses the following ...
  # https://marketplace.visualstudio.com/items?itemName=charleszipp.azure-pipelines-tasks-terraform
  # Will set some variables to trigger a terrafrom apply automatically
  # if there are just changes or ask for approval if there are any
  # resouces which are being destroyed
  ######################################################################

  - stage: "planTerraform"
    displayName: "Terraform - Plan"
    dependsOn:
      - "importTerraform"
    jobs:
      - job: "TerraformJobs"
        displayName: "Terraform > install, init & plan"
        steps:
          - task: TerraformInstaller@0
            inputs:
              terraformVersion: "$(var_tf_version)"
            displayName: "Install > terraform"

          - task: TerraformCLI@0
            inputs:
              command: "init"
              backendType: "azurerm"
              backendServiceArm: "$(var_az_sp)"
              ensureBackend: true
              backendAzureRmResourceGroupName: "$(var_tf_environment)-$(var_tf_state_rg)"
              backendAzureRmResourceGroupLocation: "$(var_tf_state_location)"
              backendAzureRmStorageAccountName: "$(var_tf_state_sa_name)"
              backendAzureRmStorageAccountSku: "$(var_tf_state_sku)"
              backendAzureRmContainerName: $(var_tf_state_container_name)
              backendAzureRmKey: "$(var_tf_environment).terraform.tstate"
            displayName: "Run > terraform init"

          - task: TerraformCLI@0
            inputs:
              command: "plan"
              environmentServiceName: "$(var_az_sp)"
              publishPlanResults: "PlanResults"
              commandOptions: "-out=$(System.DefaultWorkingDirectory)/terraform.tfplan -detailed-exitcode"
            name: "plan"
            displayName: "Run > terraform plan"

          - task: TerraformCLI@0
            inputs:
              command: "show"
              environmentServiceName: "$(var_az_sp)"
              inputTargetPlanOrStateFilePath: "$(System.DefaultWorkingDirectory)/terraform.tfplan"
            displayName: "Run > terraform show"

  # Auto Approval Terraform - uses the following ...
  # https://marketplace.visualstudio.com/items?itemName=charleszipp.azure-pipelines-tasks-terraform
  # Will run the terraform apply if there are are only changes and
  # nothing to be destroyed
  ######################################################################

  - stage: "autoTerraform"
    displayName: "Terraform - Auto Approval"
    dependsOn:
      - "planTerraform"
    condition: |
      and
        (
          succeeded(),
          eq(dependencies.planTerraform.outputs['TerraformJobs.setvar.HAS_CHANGES_ONLY'], 'true')
        )
    jobs:
      - job: "TerraformAuto"
        displayName: "Terraform > install, init & apply"
        steps:
          - task: TerraformInstaller@0
            inputs:
              terraformVersion: "$(var_tf_version)"
            displayName: "Install > terraform"

          - task: TerraformCLI@0
            inputs:
              command: "init"
              backendType: "azurerm"
              backendServiceArm: "$(var_az_sp)"
              ensureBackend: true
              backendAzureRmResourceGroupName: "$(var_tf_environment)-$(var_tf_state_rg)"
              backendAzureRmResourceGroupLocation: "$(var_tf_state_location)"
              backendAzureRmStorageAccountName: "$(var_tf_state_sa_name)"
              backendAzureRmStorageAccountSku: "$(var_tf_state_sku)"
              backendAzureRmContainerName: $(var_tf_state_container_name)
              backendAzureRmKey: "$(var_tf_environment).terraform.tstate"
            displayName: "Run > terraform init"

          - task: TerraformCLI@0
            inputs:
              command: "apply"
              environmentServiceName: "$(var_az_sp)"
            displayName: "Run > terraform apply"

  # Manual Approval Terraform - uses the following ...
  # https://marketplace.visualstudio.com/items?itemName=charleszipp.azure-pipelines-tasks-terraform
  # Will wait for changes to be approved if there are any resources
  # which are  being destroyed
  ######################################################################

  - stage: "approveTerraform"
    displayName: "Terraform - Manual Approval"
    dependsOn:
      - "planTerraform"
    condition: |
      and
        (
          succeeded(),
          eq(dependencies.planTerraform.outputs['TerraformJobs.setvar.HAS_DESTROY_CHANGES'], 'true')
        )
    jobs:
      - job: "waitForValidation"
        displayName: "Wait > Wait for manual appoval"
        pool: "server"
        timeoutInMinutes: "4320" # job times out in 3 days
        steps:
          - task: ManualValidation@0
            timeoutInMinutes: "1440" # task times out in 1 day
            inputs:
              notifyUsers: |
                azure@mckendrick.io
              instructions: "There are resources being destroyed or the costs are increasing alot as part of this deployment, please review the output of Terraform plan before approving."
              onTimeout: "reject"

      - job: "TerraformApprove"
        displayName: "Terraform > install, init & apply"
        dependsOn: "waitForValidation"
        steps:
          - task: TerraformInstaller@0
            inputs:
              terraformVersion: "$(var_tf_version)"
            displayName: "Install > terraform"

          - task: TerraformCLI@0
            inputs:
              command: "init"
              backendType: "azurerm"
              backendServiceArm: "$(var_az_sp)"
              ensureBackend: true
              backendAzureRmResourceGroupName: "$(var_tf_environment)-$(var_tf_state_rg)"
              backendAzureRmResourceGroupLocation: "$(var_tf_state_location)"
              backendAzureRmStorageAccountName: "$(var_tf_state_sa_name)"
              backendAzureRmStorageAccountSku: "$(var_tf_state_sku)"
              backendAzureRmContainerName: $(var_tf_state_container_name)
              backendAzureRmKey: "$(var_tf_environment).terraform.tstate"
            displayName: "Run > terraform init"

          - task: TerraformCLI@0
            inputs:
              command: "apply"
              environmentServiceName: "$(var_az_sp)"
            displayName: "Run > terraform apply"
